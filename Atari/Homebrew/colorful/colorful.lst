------- FILE colorful.asm LEVEL 1 PASS 1
      1  0000 ????						; colorful
      2  0000 ????						; Darrell Spice, Jr
      3  0000 ????						; November 5, 2013
      4  0000 ????						;
      5  0000 ????						; Simple 2600 program that shows off moving bands of colors
      6  0000 ????						;
      7  0000 ????						; compile using DASM
      8  0000 ????						; dasm colorful.asm -f3 -v0 -scolorful.sym -lcolorful.lst -ocolorful.bin
      9  0000 ????
     10  0000 ????						;========================================
     11  0000 ????						; Initialize DASM
     12  0000 ????						;========================================
     13  0000 ????
     14  0000 ????						; DASM supports a number of processors, this line tells DASM the code
     15  0000 ????						; is for the 6502 CPU.  The Atari has a 6507, which is 6502 with an 8K
     16  0000 ????						; address space and no interrupt lines.
     17  0000 ????				      PROCESSOR	6502
     18  0000 ????
     19  0000 ????						; vcs.h contains the standard definitions for TIA and RIOT registers
------- FILE vcs.h LEVEL 2 PASS 1
      0  0000 ????				      include	vcs.h
      1  0000 ????						; VCS.H
      2  0000 ????						; Version 1.05, 13/November/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_VCS =	105
      5  0000 ????
      6  0000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines hardware registers and memory mapping for the
     11  0000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  0000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  0000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  0000 ????						; with your views.  Please contribute, if you think you can improve this
     19  0000 ????						; file!
     20  0000 ????						;
     21  0000 ????						; Latest Revisions...
     22  0000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  0000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  0000 ????						;			    This will allow conditional code to verify VCS.H being
     25  0000 ????						;			    used for code assembly.
     26  0000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  0000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  0000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  0000 ????						;			 readability issue, and binary compatibility with disassembled
     30  0000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  0000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  0000 ????						;			 which was broken by the use of segments in this file, as
     33  0000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  0000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  0000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  0000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  0000 ????						;						   it is safe to leave it undefined, and the base address will
     38  0000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  0000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  0000 ????						;			  - register definitions are now generated through assignment
     41  0000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  0000 ????						;			    address architecture.
     43  0000 ????						; 1.0	22/MAR/2003		Initial release
     44  0000 ????
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????
     48  0000 ????						; TIA_BASE_ADDRESS
     49  0000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  0000 ????						; Normally 0, the base address should (externally, before including this file)
     51  0000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  0000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  0000 ????						; < $40 as a bankswitch.
     54  0000 ????
     55  0000 ????				      IFNCONST	TIA_BASE_ADDRESS
     56  0000 ????	       00 00	   TIA_BASE_ADDRESS =	0
     57  0000 ????				      ENDIF
     58  0000 ????
     59  0000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  0000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  0000 ????						; *OR* by declaring the label before including this file, eg:
     62  0000 ????						; TIA_BASE_ADDRESS = $40
     63  0000 ????						;   include "vcs.h"
     64  0000 ????
     65  0000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  0000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  0000 ????						; for the mirrored ROM hardware registers.
     68  0000 ????
     69  0000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  0000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  0000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  0000 ????
     73  0000 ????				      IFNCONST	TIA_BASE_READ_ADDRESS
     74  0000 ????	       00 00	   TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  0000 ????				      ENDIF
     76  0000 ????
     77  0000 ????				      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  0000 ????	       00 00	   TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  0000 ????				      ENDIF
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????
     83 U0000 ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U0000 ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0000 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE colorful.asm
     21  0000 ????
     22  0000 ????						; macro.h contains commonly used routines which aid in coding
------- FILE macro.h LEVEL 2 PASS 1
      0  0000 ????				      include	macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  0000 ????
      4  0000 ????	       00 69	   VERSION_MACRO =	105
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  0000 ????						; available at at http://www.atari2600.org/dasm
     14  0000 ????						;
     15  0000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  0000 ????						; contents, or would like to add something, please write to me
     17  0000 ????						; (atari2600@taswegian.com) with your contribution.
     18  0000 ????						;
     19  0000 ????						; Latest Revisions...
     20  0000 ????						;
     21  0000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  0000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  0000 ????						;			    used for code assembly.
     24  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  0000 ????						;
     26  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  0000 ????						;
     28  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  0000 ????						;			   (standardised macro for vertical synch code)
     30  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     31  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  0000 ????						; 1.0	22/MAR/2003		Initial release
     33  0000 ????
     34  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     35  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     37  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  0000 ????						;   registers and require them to be defined first).
     39  0000 ????
     40  0000 ????						; Available macros...
     41  0000 ????						;   SLEEP n		 - sleep for n cycles
     42  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  0000 ????
     46  0000 ????						;-------------------------------------------------------------------------------
     47  0000 ????						; SLEEP duration
     48  0000 ????						; Original author: Thomas Jentzsch
     49  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  0000 ????						; useful for code where precise timing is required.
     51  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  0000 ????
     55  0000 ????				      MAC	sleep
     56  0000 ????			   .CYCLES    SET	{1}
     57  0000 ????
     58  0000 ????				      IF	.CYCLES < 2
     59  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  0000 ????				      ERR
     61  0000 ????				      ENDIF
     62  0000 ????
     63  0000 ????				      IF	.CYCLES & 1
     64  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     65  0000 ????				      nop	0
     66  0000 ????				      ELSE
     67  0000 ????				      bit	VSYNC
     68  0000 ????				      ENDIF
     69  0000 ????			   .CYCLES    SET	.CYCLES - 3
     70  0000 ????				      ENDIF
     71  0000 ????
     72  0000 ????				      REPEAT	.CYCLES / 2
     73  0000 ????				      nop
     74  0000 ????				      REPEND
     75  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     76  0000 ????
     77  0000 ????						;-------------------------------------------------------------------------------
     78  0000 ????						; VERTICAL_SYNC
     79  0000 ????						; Original author: Manuel Polik
     80  0000 ????						; Inserts the code required for a proper 3 scannline 
     81  0000 ????						; vertical sync sequence
     82  0000 ????						;
     83  0000 ????						; Note: Alters the accumulator
     84  0000 ????						;
     85  0000 ????						; IN:
     86  0000 ????						; OUT: A = 1
     87  0000 ????
     88  0000 ????				      MAC	vertical_sync
     89  0000 ????				      LDA	#$02	; A = VSYNC enable
     90  0000 ????				      STA	WSYNC	; Finish current line
     91  0000 ????				      STA	VSYNC	; Start vertical sync
     92  0000 ????				      STA	WSYNC	; 1st line vertical sync
     93  0000 ????				      STA	WSYNC	; 2nd line vertical sync
     94  0000 ????				      LSR		; A = VSYNC disable
     95  0000 ????				      STA	WSYNC	; 3rd line vertical sync
     96  0000 ????				      STA	VSYNC	; Stop vertical sync
     97  0000 ????				      ENDM
     98  0000 ????
     99  0000 ????						;-------------------------------------------------------------------------------
    100  0000 ????						; CLEAN_START
    101  0000 ????						; Original author: Andrew Davie
    102  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  0000 ????						; Use as very first section of code on boot (ie: at reset)
    106  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  0000 ????
    108  0000 ????				      MAC	clean_start
    109  0000 ????				      sei
    110  0000 ????				      cld
    111  0000 ????
    112  0000 ????				      ldx	#0
    113  0000 ????				      txa
    114  0000 ????				      tay
    115  0000 ????			   .CLEAR_STACK dex
    116  0000 ????				      txs
    117  0000 ????				      pha
    118  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  0000 ????
    120  0000 ????				      ENDM
    121  0000 ????
    122  0000 ????						;-------------------------------------------------------
    123  0000 ????						; SET_POINTER
    124  0000 ????						; Original author: Manuel Rotschkar
    125  0000 ????						;
    126  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  0000 ????						;
    128  0000 ????						; Usage: SET_POINTER pointer, address
    129  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  0000 ????						;
    131  0000 ????						; Note: Alters the accumulator, NZ flags
    132  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  0000 ????						; IN 2: absolute address
    134  0000 ????
    135  0000 ????				      MAC	set_pointer
    136  0000 ????			   .POINTER   SET	{1}
    137  0000 ????			   .ADDRESS   SET	{2}
    138  0000 ????
    139  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  0000 ????				      STA	.POINTER	; Store in pointer
    141  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    142  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    143  0000 ????
    144  0000 ????				      ENDM
    145  0000 ????
    146  0000 ????
    147  0000 ????						;-------------------------------------------------------
    148  0000 ????						; SAME PAGE BRANCH CHECK
    149  0000 ????						; Original auther: John Payson
    150  0000 ????						;
    151  0000 ????						; Usage: sbeq, sbne, etc just like a normal beq, bne, etc.
    152  0000 ????						;	  A message will be output if the target of the branch
    153  0000 ????						;	  is not on the same page.
    154  0000 ????						;
    155  0000 ????				      mac	sbcc
    156  0000 ????				      bcc	{1}
    157  0000 ????				      if	(* ^ {1}) & $FF00
    158  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    159  0000 ????				      err
    160  0000 ????				      endif
    161  0000 ????				      endm
    162  0000 ????
    163  0000 ????				      mac	sbcs
    164  0000 ????				      bcs	{1}
    165  0000 ????				      if	(* ^ {1}) & $FF00
    166  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    167  0000 ????				      err
    168  0000 ????				      endif
    169  0000 ????				      endm
    170  0000 ????
    171  0000 ????				      mac	sbeq
    172  0000 ????				      beq	{1}
    173  0000 ????				      if	(* ^ {1}) & $FF00
    174  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    175  0000 ????				      err
    176  0000 ????				      endif
    177  0000 ????				      endm
    178  0000 ????
    179  0000 ????				      mac	sbmi
    180  0000 ????				      bmi	{1}
    181  0000 ????				      if	(* ^ {1}) & $FF00
    182  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    183  0000 ????				      err
    184  0000 ????				      endif
    185  0000 ????				      endm
    186  0000 ????
    187  0000 ????				      mac	sbne
    188  0000 ????				      bne	{1}
    189  0000 ????				      if	(* ^ {1}) & $FF00
    190  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    191  0000 ????				      err
    192  0000 ????				      endif
    193  0000 ????				      endm
    194  0000 ????
    195  0000 ????				      mac	sbpl
    196  0000 ????				      bpl	{1}
    197  0000 ????				      if	(* ^ {1}) & $FF00
    198  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    199  0000 ????				      err
    200  0000 ????				      endif
    201  0000 ????				      endm
    202  0000 ????
    203  0000 ????				      mac	sbvc
    204  0000 ????				      bvc	{1}
    205  0000 ????				      if	(* ^ {1}) & $FF00
    206  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    207  0000 ????				      err
    208  0000 ????				      endif
    209  0000 ????				      endm
    210  0000 ????
    211  0000 ????				      mac	sbvs
    212  0000 ????				      bvs	{1}
    213  0000 ????				      if	(* ^ {1}) & $FF00
    214  0000 ????				      echo	"PAGE CROSSING","WARNING ",{1}," at ",*
    215  0000 ????				      err
    216  0000 ????				      endif
    217  0000 ????				      endm
    218  0000 ????
    219  0000 ????						;-------------------------------------------------------
    220  0000 ????						; DIFFERENT PAGE BRANCH CHECK
    221  0000 ????						; Original auther: Darrell Spice, Jr.
    222  0000 ????						;
    223  0000 ????						; Usage: dbeq, dbne, etc just like a normal beq, bne, etc.
    224  0000 ????						;	  A message will be output if the target of the branch
    225  0000 ????						;	  is not on a different page.
    226  0000 ????						;
    227  0000 ????				      mac	dbcc
    228  0000 ????				      bcc	{1}
    229  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    230  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    231  0000 ????				      err
    232  0000 ????				      endif
    233  0000 ????				      endm
    234  0000 ????
    235  0000 ????				      mac	dbcs
    236  0000 ????				      bcs	{1}
    237  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    238  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    239  0000 ????				      err
    240  0000 ????				      endif
    241  0000 ????				      endm
    242  0000 ????
    243  0000 ????				      mac	dbeq
    244  0000 ????				      beq	{1}
    245  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    246  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    247  0000 ????				      err
    248  0000 ????				      endif
    249  0000 ????				      endm
    250  0000 ????
    251  0000 ????				      mac	dbmi
    252  0000 ????				      bmi	{1}
    253  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    254  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    255  0000 ????				      err
    256  0000 ????				      endif
    257  0000 ????				      endm
    258  0000 ????
    259  0000 ????				      mac	dbne
    260  0000 ????				      bne	{1}
    261  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    262  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    263  0000 ????				      err
    264  0000 ????				      endif
    265  0000 ????				      endm
    266  0000 ????
    267  0000 ????				      mac	dbpl
    268  0000 ????				      bpl	{1}
    269  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    270  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    271  0000 ????				      err
    272  0000 ????				      endif
    273  0000 ????				      endm
    274  0000 ????
    275  0000 ????				      mac	dbvc
    276  0000 ????				      bvc	{1}
    277  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    278  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    279  0000 ????				      err
    280  0000 ????				      endif
    281  0000 ????				      endm
    282  0000 ????
    283  0000 ????				      mac	dbvs
    284  0000 ????				      bvs	{1}
    285  0000 ????				      if	((* ^ {1}) & $FF00) = 0
    286  0000 ????				      echo	"SAME PAGE","WARNING ",{1}," at ",*
    287  0000 ????				      err
    288  0000 ????				      endif
    289  0000 ????				      endm
    290  0000 ????
    291  0000 ????						; EOF 
    292  0000 ????
    293  0000 ????
------- FILE colorful.asm
     24  0000 ????
     25  0000 ????
     26  0000 ????						;========================================
     27  0000 ????						; Define RAM Usage
     28  0000 ????						;========================================
     29  0000 ????
     30  0000 ????						; define a segment for variables
     31  0000 ????						; .U means uninitialized, does not end up in ROM
     32 U0000 ????				      SEG.U	VARS
     33 U0000 ????
     34 U0000 ????						; RAM starts at $80
     35 U0080					      ORG	$80
     36 U0080
     37 U0080							; holds background color for first scanline of frame
     38 U0080		       00	   BackgroundColor ds	1	; stored in $80
     39 U0081
     40 U0081							; holds playfield color for first scanline of frame
     41 U0081		       00	   PlayfieldColor ds	1	; stored in $81
     42 U0082
     43 U0082							; holds # of scanlines left for the kernel to draw
     44 U0082		       00	   LineCount  ds	1	; stored in $82
     45 U0083
     46 U0083
     47 U0083							;========================================
     48 U0083							; Define Start of Cartridge
     49 U0083							;========================================
     50 U0083
     51 U0083							; define a segment for code
     52  0000 ????				      SEG	CODE
     53  0000 ????
     54  0000 ????						; ROM starts at $F000
     55  f000					      ORG	$F000
     56  f000
     57  f000
     58  f000							;========================================
     59  f000							; Initialize Atari
     60  f000							;========================================
     61  f000
     62  f000				   InitSystem
     63  f000							; CLEAN_START is a macro found in macro.h
     64  f000							; it sets all RAM, TIA registers
     65  f000							; and CPU registers to 0
      0  f000					      CLEAN_START
      1  f000		       78		      sei
      2  f001		       d8		      cld
      3  f002
      4  f002		       a2 00		      ldx	#0
      5  f004		       8a		      txa
      6  f005		       a8		      tay
      7  f006		       ca	   .CLEAR_STACK dex
      8  f007		       9a		      txs
      9  f008		       48		      pha
     10  f009		       d0 fb		      bne	.CLEAR_STACK
     11  f00b
     67  f00b
     68  f00b							; set playfield to show vertical stripes
     69  f00b		       a9 aa		      lda	#$AA
     70  f00d		       85 0d		      sta	PF0
     71  f00f		       85 0f		      sta	PF2
     72  f011		       a9 55		      lda	#$55
     73  f013		       85 0e		      sta	PF1
     74  f015
     75  f015
     76  f015							;========================================
     77  f015							; Sync Signal
     78  f015							;========================================
     79  f015
     80  f015				   VerticalSync
     81  f015		       a9 02		      lda	#2	; LoaD Accumulator with 2
     82  f017		       85 02		      sta	WSYNC	; STore Accumulator to WSYNC, any value halts CPU until start of next scanline
     83  f019		       85 00		      sta	VSYNC	; Accumulator D1=1, turns on Vertical Sync signal
     84  f01b		       85 01		      sta	VBLANK	; Accumulator D1=1, turns on Vertical Blank signal (image output off)
     85  f01d		       a9 2f		      lda	#47
     86  f01f		       8d 96 02 	      sta	TIM64T	; set timer for end of Vertical Blank
     87  f022		       85 02		      sta	WSYNC	; 1st scanline of VSYNC
     88  f024		       85 02		      sta	WSYNC	; 2nd scanline of VSYNC
     89  f026		       a9 00		      lda	#0	; LoaD Accumulator with 0
     90  f028		       85 02		      sta	WSYNC	; 3rd scanline of VSYNC
     91  f02a		       85 00		      sta	VSYNC	; Accumulator D1=0, turns off Vertical Sync signal
     92  f02c
     93  f02c
     94  f02c							;========================================
     95  f02c							; Vertical Blank
     96  f02c							;========================================
     97  f02c
     98  f02c				   VerticalBlank
     99  f02c							;==========================
    100  f02c							;  game logic starts here
    101  f02c							;==========================
    102  f02c
    103  f02c							; update background color for first scanline of this frame
    104  f02c		       e6 80		      inc	BackgroundColor
    105  f02e
    106  f02e							; update playfield color for first scanline this frame
    107  f02e		       c6 81		      dec	PlayfieldColor
    108  f030		       a9 c7		      lda	#199
    109  f032		       85 82		      sta	LineCount
    110  f034
    111  f034							;==========================
    112  f034							;   game logic ends here
    113  f034							;==========================
    114  f034
    115  f034				   VBwait
    116  f034		       85 02		      sta	WSYNC
    117  f036		       2c 85 02 	      bit	TIMINT
    118  f039		       10 f9		      bpl	VBwait	; loop until the timer ends
    119  f03b
    120  f03b
    121  f03b							;========================================
    122  f03b							; Kernel
    123  f03b							;========================================
    124  f03b
    125  f03b							; turn on video output
    126  f03b		       85 02		      sta	WSYNC
    127  f03d		       a9 00		      lda	#0
    128  f03f		       85 01		      sta	VBLANK
    129  f041		       85 09		      sta	COLUBK	; color first scanline black
    130  f043		       85 08		      sta	COLUPF	; color first scanline black
    131  f045		       a6 80		      ldx	BackgroundColor
    132  f047		       a4 81		      ldy	PlayfieldColor
    133  f049
    134  f049							; draw the screen
    135  f049				   KernelLoop
    136  f049		       85 02		      sta	WSYNC	; wait for start of next scanline
    137  f04b		       86 09		      stx	COLUBK	; change background color for current scanline
    138  f04d		       84 08		      sty	COLUPF	; change playfield color for current scanline
    139  f04f		       e8		      inx		; increase X so next scanline has a different background color
    140  f050		       c8		      iny		; increase Y so next scanline has a different playfield color
    141  f051		       c6 82		      dec	LineCount	; decrease the line count
    142  f053		       d0 f4		      bne	KernelLoop	; if we didn't hit 0, then draw another scanline
    143  f055
    144  f055
    145  f055							;========================================
    146  f055							; Overscan
    147  f055							;========================================
    148  f055
    149  f055							; done drawing the screen
    150  f055				   OverScan
    151  f055		       85 02		      sta	WSYNC	; Wait for SYNC (start of next scanline)
    152  f057		       a9 02		      lda	#2	; LoaD Accumulator with 2
    153  f059		       85 01		      sta	VBLANK	; STore Accumulator to VBLANK, D1=1 turns image output off
    154  f05b		       a9 17		      lda	#23
    155  f05d		       8d 96 02 	      sta	TIM64T
    156  f060
    157  f060							;===================================
    158  f060							;  additional game logic goes here
    159  f060							;===================================
    160  f060
    161  f060				   OSwait
    162  f060		       85 02		      sta	WSYNC
    163  f062		       2c 85 02 	      bit	TIMINT
    164  f065		       10 f9		      bpl	OSwait	; loop until the timer ends
    165  f067
    166  f067		       4c 15 f0 	      jmp	VerticalSync	; start the next frame
    167  f06a
    168  f06a
    169  f06a							;========================================
    170  f06a							; Define End of Cartridge
    171  f06a							;========================================
    172  f06a
    173  fffa					      ORG	$FFFA	; set address to 6507 Interrupt Vectors
    174  fffa		       00 f0		      .WORD.w	InitSystem	; NMI
    175  fffc		       00 f0		      .WORD.w	InitSystem	; RESET
    176  fffe		       00 f0		      .WORD.w	InitSystem	; IRQ
